name: Deploy Full Stack Application

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-web:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create environment configuration
        run: |
          # Create build directory
          mkdir -p dist
          
          # Copy source files
          cp -r src/web/* dist/
          
          # Create environment-specific configuration
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            cat > dist/js/config/config.json << EOF
          {
            "GOOGLE_MAPS_API_KEY": "${{ secrets.GOOGLE_MAPS_API_KEY }}",
            "API_BASE_URL": "${{ secrets.API_BASE_URL }}",
            "ENVIRONMENT": "production"
          }
          EOF
          fi

      - name: Minify CSS
        run: |
          if command -v npx &> /dev/null; then
            echo "Minifying CSS..."
            npx postcss dist/css/styles.css --use autoprefixer cssnano -o dist/css/styles.min.css
            # Update HTML to reference minified CSS
            sed -i 's/styles\.css/styles.min.css/g' dist/index.html
          fi

      - name: Setup Pages
        if: github.ref == 'refs/heads/master'
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  build-api:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore src/api

      - name: Build API
        run: dotnet build src/api --configuration Release --no-restore

      - name: Publish API
        run: dotnet publish src/api --configuration Release --output ./api-publish

      - name: Upload API artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: ./api-publish

  deploy-web:
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-web
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-api:
    if: github.ref == 'refs/heads/master'
    environment:
      name: azure-production
    runs-on: ubuntu-latest
    needs: build-api
    
    steps:
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: ./api-publish

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.AZURE_FUNCTION_APP_NAME }}
          package: './api-publish'
          
  seed-database:
    if: github.ref == 'refs/heads/master'
    environment:
      name: azure-production
    runs-on: ubuntu-latest
    needs: deploy-api
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install database dependencies
        run: |
          cd src/db
          npm ci

      - name: Seed production database
        run: |
          cd src/db
          npm run seed
        env:
          COSMOSDB_ENDPOINT: ${{ secrets.COSMOSDB_ENDPOINT }}
          COSMOSDB_KEY: ${{ secrets.COSMOSDB_KEY }}
          COSMOSDB_DATABASE_NAME: ${{ secrets.COSMOSDB_DATABASE_NAME }}
          COSMOSDB_CONTAINER_NAME: ${{ secrets.COSMOSDB_CONTAINER_NAME }}
